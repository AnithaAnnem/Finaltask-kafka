@Library('KafkaSharedLib') _  // Link to your shared library

pipeline {
    agent any

    environment {
        ANSIBLE_KEY   = '/var/lib/jenkins/.ssh/MYKAFKA.pem'
        ANSIBLE_USER  = 'ubuntu'
        INVENTORY     = 'finalcluster/aws_ec2.yml'
        PLAYBOOK      = 'finalcluster/site.yml'
        GIT_REPO      = 'https://github.com/AnithaAnnem/Finaltask-kafka.git'
        GIT_BRANCH    = 'main'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    def kafka = new org.cloudninja.kafka.template.KafkaDeployment(this)
                    kafka.checkoutCode(GIT_REPO, GIT_BRANCH)
                }
            }
        }

        stage('Ansible Lint') {
            steps {
                script {
                    def kafka = new org.cloudninja.kafka.template.KafkaDeployment(this)
                    kafka.ansibleLint(PLAYBOOK)
                }
            }
        }

        stage('Ansible Syntax Check') {
            steps {
                script {
                    def kafka = new org.cloudninja.kafka.template.KafkaDeployment(this)
                    kafka.ansibleSyntaxCheck(INVENTORY, PLAYBOOK)
                }
            }
        }

        stage('Ansible Dry Run') {
            steps {
                script {
                    def kafka = new org.cloudninja.kafka.template.KafkaDeployment(this)
                    kafka.ansibleDryRun(INVENTORY, PLAYBOOK, ANSIBLE_USER, ANSIBLE_KEY)
                }
            }
        }

        stage('Deploy Zookeeper') {
            steps {
                script {
                    def kafka = new org.cloudninja.kafka.template.KafkaDeployment(this)
                    kafka.deployZookeeper(INVENTORY, PLAYBOOK, ANSIBLE_USER, ANSIBLE_KEY)
                }
            }
        }

        stage('Deploy Kafka') {
            steps {
                script {
                    def kafka = new org.cloudninja.kafka.template.KafkaDeployment(this)
                    kafka.deployKafka(INVENTORY, PLAYBOOK, ANSIBLE_USER, ANSIBLE_KEY)
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Kafka/Zookeeper deployment completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs for details."
        }
        always {
            echo "üßπ Cleaning workspace..."
            cleanWs()
        }
    }
}
